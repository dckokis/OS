#include <sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <libgen.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFSIZE  100
#define FILESIZE 50

typedef struct {
    int fileDescriptor;
    size_t linesCount;
    size_t offsets[FILESIZE];
    size_t linesSizes[FILESIZE];
} StringTable;

StringTable *fileReader(const char *name) {
    StringTable *stringTable = (StringTable *) malloc(sizeof(StringTable));
    if (!stringTable) {
        return NULL;
    }
    stringTable->fileDescriptor = open(name, O_RDONLY);

    if (stringTable->fileDescriptor == -1) {
        free(stringTable);
        return NULL;
    }

    stringTable->linesCount = 1;
    stringTable->offsets[0] = 0;
    char stringBuffer[BUFSIZE];
    size_t i = 0, line_offset = 0;
    int nbytes = read(stringTable->fileDescriptor, stringBuffer, BUFSIZE);

    while (nbytes > 0) {
        const char *ch = NULL;
        for (ch = stringBuffer; ch < stringBuffer + BUFSIZE; ch++) {
            i++;
            if (*ch == '\n') {
                stringTable->linesSizes[stringTable->linesCount - 1] = i;
                line_offset += i;
                stringTable->offsets[stringTable->linesCount] = line_offset;
                stringTable->linesCount++;
                i = 0;
            }

        }
        nbytes = read(stringTable->fileDescriptor, stringBuffer, BUFSIZE);
    }
    if (nbytes == -1) {
        close(stringTable->fileDescriptor);
        free(stringTable);
        return NULL;

    }
    return stringTable;
}


int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Wrong input!\n");
        return 0;
    }

    StringTable *file = fileReader(argv[1]);
    if (file == NULL) {
        perror("Reading error\n");
        return 0;
    }
    size_t string_number;
    do {
        printf("Line number: ");
        scanf("%d", &string_number);

        if (file->linesCount < string_number) {
            printf("Line not found\n");
            break;
        } else {
            size_t len = file->linesSizes[string_number - 1];
            lseek(file->fileDescriptor, 0, SEEK_SET);
            char* buffer;
            size_t full_offset = file->offsets[string_number - 1];
            if (lseek(file->fileDescriptor, full_offset, SEEK_SET) == -1 || read(file->fileDescriptor, buffer, len) == -1) {
                perror("Reading error");
                close(file->fileDescriptor);
                free(file);
                return 1;
            } else {
                write(STDIN_FILENO, buffer, len);
            }
        }
    } while (string_number > 0);
    close(file->fileDescriptor);
    free(file);
    return 0;
}